// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: effective_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_effective_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_effective_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_effective_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_effective_5fmsg_2eproto {
  static const uint32_t offsets[];
};
class EffectiveMsg;
struct EffectiveMsgDefaultTypeInternal;
extern EffectiveMsgDefaultTypeInternal _EffectiveMsg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EffectiveMsg* Arena::CreateMaybeMessage<::EffectiveMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EffectiveMsg final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:EffectiveMsg) */ {
 public:
  inline EffectiveMsg() : EffectiveMsg(nullptr) {}
  ~EffectiveMsg() override;
  explicit PROTOBUF_CONSTEXPR EffectiveMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EffectiveMsg(const EffectiveMsg& from);
  EffectiveMsg(EffectiveMsg&& from) noexcept
    : EffectiveMsg() {
    *this = ::std::move(from);
  }

  inline EffectiveMsg& operator=(const EffectiveMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline EffectiveMsg& operator=(EffectiveMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EffectiveMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const EffectiveMsg* internal_default_instance() {
    return reinterpret_cast<const EffectiveMsg*>(
               &_EffectiveMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EffectiveMsg& a, EffectiveMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(EffectiveMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EffectiveMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EffectiveMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EffectiveMsg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EffectiveMsg& from);
  void MergeFrom(const EffectiveMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EffectiveMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EffectiveMsg";
  }
  protected:
  explicit EffectiveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 6,
    kFuncNameFieldNumber = 7,
    kLogInfoFieldNumber = 8,
    kTimestampFieldNumber = 2,
    kLevelFieldNumber = 1,
    kPidFieldNumber = 3,
    kTidFieldNumber = 4,
    kLineFieldNumber = 5,
  };
  // string file_name = 6;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string func_name = 7;
  void clear_func_name();
  const std::string& func_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_func_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_func_name();
  PROTOBUF_NODISCARD std::string* release_func_name();
  void set_allocated_func_name(std::string* func_name);
  private:
  const std::string& _internal_func_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_func_name(const std::string& value);
  std::string* _internal_mutable_func_name();
  public:

  // string log_info = 8;
  void clear_log_info();
  const std::string& log_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_info();
  PROTOBUF_NODISCARD std::string* release_log_info();
  void set_allocated_log_info(std::string* log_info);
  private:
  const std::string& _internal_log_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_info(const std::string& value);
  std::string* _internal_mutable_log_info();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 level = 1;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 pid = 3;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // int32 tid = 4;
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // int32 line = 5;
  void clear_line();
  int32_t line() const;
  void set_line(int32_t value);
  private:
  int32_t _internal_line() const;
  void _internal_set_line(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EffectiveMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr func_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_info_;
    int64_t timestamp_;
    int32_t level_;
    int32_t pid_;
    int32_t tid_;
    int32_t line_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_effective_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EffectiveMsg

// int32 level = 1;
inline void EffectiveMsg::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t EffectiveMsg::_internal_level() const {
  return _impl_.level_;
}
inline int32_t EffectiveMsg::level() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.level)
  return _internal_level();
}
inline void EffectiveMsg::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void EffectiveMsg::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:EffectiveMsg.level)
}

// int64 timestamp = 2;
inline void EffectiveMsg::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t EffectiveMsg::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t EffectiveMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.timestamp)
  return _internal_timestamp();
}
inline void EffectiveMsg::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void EffectiveMsg::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:EffectiveMsg.timestamp)
}

// int32 pid = 3;
inline void EffectiveMsg::clear_pid() {
  _impl_.pid_ = 0;
}
inline int32_t EffectiveMsg::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t EffectiveMsg::pid() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.pid)
  return _internal_pid();
}
inline void EffectiveMsg::_internal_set_pid(int32_t value) {
  
  _impl_.pid_ = value;
}
inline void EffectiveMsg::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:EffectiveMsg.pid)
}

// int32 tid = 4;
inline void EffectiveMsg::clear_tid() {
  _impl_.tid_ = 0;
}
inline int32_t EffectiveMsg::_internal_tid() const {
  return _impl_.tid_;
}
inline int32_t EffectiveMsg::tid() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.tid)
  return _internal_tid();
}
inline void EffectiveMsg::_internal_set_tid(int32_t value) {
  
  _impl_.tid_ = value;
}
inline void EffectiveMsg::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:EffectiveMsg.tid)
}

// int32 line = 5;
inline void EffectiveMsg::clear_line() {
  _impl_.line_ = 0;
}
inline int32_t EffectiveMsg::_internal_line() const {
  return _impl_.line_;
}
inline int32_t EffectiveMsg::line() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.line)
  return _internal_line();
}
inline void EffectiveMsg::_internal_set_line(int32_t value) {
  
  _impl_.line_ = value;
}
inline void EffectiveMsg::set_line(int32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:EffectiveMsg.line)
}

// string file_name = 6;
inline void EffectiveMsg::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& EffectiveMsg::file_name() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EffectiveMsg::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EffectiveMsg.file_name)
}
inline std::string* EffectiveMsg::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:EffectiveMsg.file_name)
  return _s;
}
inline const std::string& EffectiveMsg::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void EffectiveMsg::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EffectiveMsg::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EffectiveMsg::release_file_name() {
  // @@protoc_insertion_point(field_release:EffectiveMsg.file_name)
  return _impl_.file_name_.Release();
}
inline void EffectiveMsg::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EffectiveMsg.file_name)
}

// string func_name = 7;
inline void EffectiveMsg::clear_func_name() {
  _impl_.func_name_.ClearToEmpty();
}
inline const std::string& EffectiveMsg::func_name() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.func_name)
  return _internal_func_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EffectiveMsg::set_func_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.func_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EffectiveMsg.func_name)
}
inline std::string* EffectiveMsg::mutable_func_name() {
  std::string* _s = _internal_mutable_func_name();
  // @@protoc_insertion_point(field_mutable:EffectiveMsg.func_name)
  return _s;
}
inline const std::string& EffectiveMsg::_internal_func_name() const {
  return _impl_.func_name_.Get();
}
inline void EffectiveMsg::_internal_set_func_name(const std::string& value) {
  
  _impl_.func_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EffectiveMsg::_internal_mutable_func_name() {
  
  return _impl_.func_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EffectiveMsg::release_func_name() {
  // @@protoc_insertion_point(field_release:EffectiveMsg.func_name)
  return _impl_.func_name_.Release();
}
inline void EffectiveMsg::set_allocated_func_name(std::string* func_name) {
  if (func_name != nullptr) {
    
  } else {
    
  }
  _impl_.func_name_.SetAllocated(func_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.func_name_.IsDefault()) {
    _impl_.func_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EffectiveMsg.func_name)
}

// string log_info = 8;
inline void EffectiveMsg::clear_log_info() {
  _impl_.log_info_.ClearToEmpty();
}
inline const std::string& EffectiveMsg::log_info() const {
  // @@protoc_insertion_point(field_get:EffectiveMsg.log_info)
  return _internal_log_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EffectiveMsg::set_log_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.log_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EffectiveMsg.log_info)
}
inline std::string* EffectiveMsg::mutable_log_info() {
  std::string* _s = _internal_mutable_log_info();
  // @@protoc_insertion_point(field_mutable:EffectiveMsg.log_info)
  return _s;
}
inline const std::string& EffectiveMsg::_internal_log_info() const {
  return _impl_.log_info_.Get();
}
inline void EffectiveMsg::_internal_set_log_info(const std::string& value) {
  
  _impl_.log_info_.Set(value, GetArenaForAllocation());
}
inline std::string* EffectiveMsg::_internal_mutable_log_info() {
  
  return _impl_.log_info_.Mutable(GetArenaForAllocation());
}
inline std::string* EffectiveMsg::release_log_info() {
  // @@protoc_insertion_point(field_release:EffectiveMsg.log_info)
  return _impl_.log_info_.Release();
}
inline void EffectiveMsg::set_allocated_log_info(std::string* log_info) {
  if (log_info != nullptr) {
    
  } else {
    
  }
  _impl_.log_info_.SetAllocated(log_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.log_info_.IsDefault()) {
    _impl_.log_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EffectiveMsg.log_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_effective_5fmsg_2eproto
